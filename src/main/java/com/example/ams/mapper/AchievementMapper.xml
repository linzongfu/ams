<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.ams.mapper.AchievementMapper">
  <resultMap id="BaseResultMap" type="com.example.ams.model.Achievement">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="studentid" jdbcType="INTEGER" property="studentid" />
    <result column="ccid" jdbcType="INTEGER" property="ccid" />
    <result column="score" jdbcType="DOUBLE" property="score" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.ams.model.Achievement">
    <result column="remark" jdbcType="LONGVARCHAR" property="remark" />
  </resultMap>
  <sql id="Base_Column_List">
    id, studentid, ccid, score, create_at
  </sql>
  <sql id="Blob_Column_List">
    remark
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from achievement
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from achievement
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.ams.model.Achievement">
    insert into achievement (id, studentid, ccid, 
      score, create_at, remark
      )
    values (#{id,jdbcType=INTEGER}, #{studentid,jdbcType=INTEGER}, #{ccid,jdbcType=INTEGER}, 
      #{score,jdbcType=DOUBLE}, #{createAt,jdbcType=TIMESTAMP}, #{remark,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.ams.model.Achievement">
    insert into achievement
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentid != null">
        studentid,
      </if>
      <if test="ccid != null">
        ccid,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentid != null">
        #{studentid,jdbcType=INTEGER},
      </if>
      <if test="ccid != null">
        #{ccid,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        #{score,jdbcType=DOUBLE},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.ams.model.Achievement">
    update achievement
    <set>
      <if test="studentid != null">
        studentid = #{studentid,jdbcType=INTEGER},
      </if>
      <if test="ccid != null">
        ccid = #{ccid,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=DOUBLE},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.ams.model.Achievement">
    update achievement
    set studentid = #{studentid,jdbcType=INTEGER},
      ccid = #{ccid,jdbcType=INTEGER},
      score = #{score,jdbcType=DOUBLE},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.ams.model.Achievement">
    update achievement
    set studentid = #{studentid,jdbcType=INTEGER},
      ccid = #{ccid,jdbcType=INTEGER},
      score = #{score,jdbcType=DOUBLE},
      create_at = #{createAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="exsisAchivement" resultType="com.example.ams.model.Achievement" >
    select  id from achievement where studentid=#{arg0}  and ccid=#{arg1} order by create_at desc  LIMIT 0,1
  </select>

  <select id="usualPerformance" resultType="com.example.ams.model.StuAchievement" >
    SELECT c.name AS CourseName,aa.score As Score
    FROM achievement aa,class_course cc,course c
    WHERE aa.studentid= #{arg0}  AND cc.semesterid=#{arg1}  AND c.id=cc.courseid AND cc.classid=#{arg2} AND aa.ccid=cc.id
  </select>
  <select id="Statistical" resultType="com.example.ams.model.StuAchievement" >
  SELECT semester.name as SemesterName ,AVG(aa.score) as AvgScore ,MAX(aa.score) as MaxScore,MIN(aa.score) as MinScore
  FROM achievement aa,class_course cc,course c ,semester
   WHERE aa.studentid= #{arg0}  AND c.id=cc.courseid AND cc.classid=#{arg1} AND aa.ccid=cc.id AND semester.id=cc.semesterid GROUP BY semester.name
  </select>
</mapper>